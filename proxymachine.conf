require 'base64'
require 'net/http'
require './hash_ttl'

API_PATH = 'http://localhost:3000/api/v1'
AUTH_REGEXP = /Proxy-Authorization:\s*[Bb]asic\s*(.+)\r\n/

def get_http_version(str)
  match = str.match(/HTTP\/1\.[01]/)
  match[0] if match
end

def find_hostname(str)
  match = str.match(/Host:\s*(.+)\r\n/)
  host = nil
  if !match
    match = str.match(/[A-Z]+\s+(.+)\s/)
    if match && match[1].start_with?('http')
      host = match[1].split('/')[2]
    end
  else
    host = match[1]
  end

  return unless host

  if host.include?(':')
    host
  else
    "#{host}:80"
  end
end

cache = HashTtl.new(30)

def router(data, pr, cache)
  return { noop: true } unless data.include? "\r\n\r\n"
  http_version = get_http_version(data)
  str_407 = "#{http_version} 407 Proxy Authentication Required\r\nProxy-Authenticate: Basic realm=\"Proxy\"\r\n\r\n"

  return { close: str_407 } unless data.include?('Proxy-Authorization:')

  auth = data.scan(AUTH_REGEXP).first
  if auth && auth[0]
    ip = pr.split(':').first
    key = "#{ip}#{auth[0]}"
    cached_response = cache[key]
    if cached_response
      puts 'cached'
      return { close: str_407 } if cached_response == 'no'
    else
      login, password = Base64.decode64(auth[0]).split(':')
      api_uri = URI("#{API_PATH}/ip/#{ip}/can_login?proxy_login=#{login}&proxy_password=#{password}")
      response = Net::HTTP.get(api_uri) rescue 'no'
      cache[key] = response
      return { close: str_407 } if response == 'no'
    end
  end

  hostname = find_hostname(data)
  return { close: true } unless hostname

  if data.start_with?('CONNECT')
    { remote: hostname, reply: "#{http_version} 200 Connection established\r\n\r\n", data: '' }
  else
    { remote: hostname, data: data.gsub(AUTH_REGEXP, '') }
  end
end

proxy do |data, pr|
  router(data, pr, cache)
end

